// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_countries_states/test/location_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i4;
import 'package:flutter_countries_states/core/error/failure.dart' as _i7;
import 'package:flutter_countries_states/domain/entity/country_params.dart'
    as _i9;
import 'package:flutter_countries_states/domain/entity/location_entity.dart'
    as _i8;
import 'package:flutter_countries_states/domain/repo/location_back_repo.dart'
    as _i3;
import 'package:flutter_countries_states/domain/repo/location_repo.dart' as _i2;
import 'package:flutter_countries_states/domain/usecase/get_country_usecase.dart'
    as _i5;
import 'package:flutter_countries_states/domain/usecase/get_state_usecase.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocationRepository_0 extends _i1.SmartFake
    implements _i2.LocationRepository {
  _FakeLocationRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBackupRepository_1 extends _i1.SmartFake
    implements _i3.BackupRepository {
  _FakeBackupRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetCountriesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCountriesUseCase extends _i1.Mock
    implements _i5.GetCountriesUseCase {
  MockGetCountriesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LocationRepository get primaryRepository => (super.noSuchMethod(
        Invocation.getter(#primaryRepository),
        returnValue: _FakeLocationRepository_0(
          this,
          Invocation.getter(#primaryRepository),
        ),
      ) as _i2.LocationRepository);

  @override
  _i3.BackupRepository get backupRepository => (super.noSuchMethod(
        Invocation.getter(#backupRepository),
        returnValue: _FakeBackupRepository_1(
          this,
          Invocation.getter(#backupRepository),
        ),
      ) as _i3.BackupRepository);

  @override
  bool get useBackupOnFailure => (super.noSuchMethod(
        Invocation.getter(#useBackupOnFailure),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<_i4.Either<_i7.Failure, List<_i8.LocationEntity>>> call(
          _i9.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i6.Future<_i4.Either<_i7.Failure, List<_i8.LocationEntity>>>.value(
                _FakeEither_2<_i7.Failure, List<_i8.LocationEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, List<_i8.LocationEntity>>>);
}

/// A class which mocks [GetStatesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetStatesUseCase extends _i1.Mock implements _i10.GetStatesUseCase {
  MockGetStatesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LocationRepository get primaryRepository => (super.noSuchMethod(
        Invocation.getter(#primaryRepository),
        returnValue: _FakeLocationRepository_0(
          this,
          Invocation.getter(#primaryRepository),
        ),
      ) as _i2.LocationRepository);

  @override
  _i3.BackupRepository get backupRepository => (super.noSuchMethod(
        Invocation.getter(#backupRepository),
        returnValue: _FakeBackupRepository_1(
          this,
          Invocation.getter(#backupRepository),
        ),
      ) as _i3.BackupRepository);

  @override
  bool get useBackupOnFailure => (super.noSuchMethod(
        Invocation.getter(#useBackupOnFailure),
        returnValue: false,
      ) as bool);

  @override
  void updateCountryMap(List<_i8.LocationEntity>? countries) =>
      super.noSuchMethod(
        Invocation.method(
          #updateCountryMap,
          [countries],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i4.Either<_i7.Failure, List<_i8.LocationEntity>>> call(
          _i9.CountryParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue:
            _i6.Future<_i4.Either<_i7.Failure, List<_i8.LocationEntity>>>.value(
                _FakeEither_2<_i7.Failure, List<_i8.LocationEntity>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, List<_i8.LocationEntity>>>);
}
